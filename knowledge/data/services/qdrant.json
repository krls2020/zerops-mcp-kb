{
  "type": "qdrant",
  "category": "database",
  "description": "Vector database for AI applications and similarity search",
  "versions": [
    { "version": "1", "status": "current", "recommended": true, "note": "Always uses latest stable" }
  ],
  "modes": ["NON_HA"],
  "ports": {
    "default": 6333,
    "internal": true,
    "httpSupport": true,
    "grpc": 6334
  },
  "configuration": {
    "yamlImport": {
      "required": ["hostname", "type"],
      "optional": ["minContainers", "maxContainers", "envVariables"],
      "defaults": {
        "mode": "NON_HA"
      }
    },
    "resources": {
      "minContainers": 1,
      "maxContainers": { "max": 6 },
      "verticalScaling": {
        "cpu": { "min": 1, "max": 32, "units": "cores" },
        "ram": { "min": 0.5, "max": 128, "units": "GB", "note": "More RAM for larger vector collections" },
        "disk": { "min": 5, "max": 5000, "units": "GB" }
      }
    },
    "storage": {
      "type": "Persistent disk storage",
      "indexing": "In-memory with disk persistence"
    }
  },
  "envVariables": {
    "autoGenerated": {
      "hostname": "Internal hostname for connections",
      "connectionString": "Full Qdrant connection URL",
      "host": "Qdrant host (same as hostname)",
      "port": "HTTP API port (6333)",
      "grpc_port": "gRPC port (6334)",
      "api_key": "Auto-generated API key for authentication"
    }
  },
  "access": {
    "internal": "Accessible from other services via ${servicename_hostname}",
    "external": "No direct external access, use VPN for management",
    "auth": "API key authentication",
    "protocols": ["HTTP REST API", "gRPC API"]
  },
  "features": [
    "Vector similarity search",
    "Hybrid search (vector + payload filtering)",
    "Multiple distance metrics (Cosine, Euclidean, Dot Product)",
    "Dynamic collection management",
    "Batch operations",
    "Snapshots and backups",
    "Rich filtering capabilities",
    "Quantization for efficiency"
  ],
  "vectorSupport": {
    "dimensions": "Up to 65536 dimensions",
    "dataTypes": ["float32", "uint8 (quantized)"],
    "metrics": ["Cosine", "Euclid", "Dot", "Manhattan"]
  },
  "bestPractices": [
    "Choose appropriate vector dimensions for your use case",
    "Use quantization for large collections",
    "Configure proper indexing parameters",
    "Monitor memory usage for large datasets",
    "Use batch operations for bulk inserts",
    "Implement proper error handling",
    "Use payload indexing for hybrid search"
  ],
  "clientLibraries": {
    "python": "qdrant-client",
    "javascript": "@qdrant/js-client",
    "rust": "qdrant-client",
    "go": "github.com/qdrant/go-client"
  },
  "connectionExamples": {
    "python": {
      "code": "from qdrant_client import QdrantClient\nclient = QdrantClient(host='${hostname}', port=6333, api_key='${api_key}')"
    },
    "javascript": {
      "code": "import { QdrantClient } from '@qdrant/js-client';\nconst client = new QdrantClient({ host: '${hostname}', port: 6333, apiKey: '${api_key}' });"
    },
    "rest": {
      "url": "http://${hostname}:6333",
      "headers": { "api-key": "${api_key}" }
    }
  },
  "useCases": {
    "semanticSearch": {
      "description": "Semantic text search",
      "models": ["OpenAI embeddings", "Sentence transformers"]
    },
    "imageSearch": {
      "description": "Similar image search",
      "models": ["CLIP", "ResNet"]
    },
    "recommendations": {
      "description": "Product/content recommendations",
      "features": ["User embeddings", "Item embeddings"]
    },
    "rag": {
      "description": "Retrieval Augmented Generation",
      "integration": ["LangChain", "LlamaIndex"]
    }
  },
  "examples": {
    "basic": {
      "yamlImport": {
        "services": [
          {
            "hostname": "vectordb",
            "type": "qdrant@1"
          }
        ]
      }
    },
    "withAI": {
      "yamlImport": {
        "services": [
          {
            "hostname": "vectordb",
            "type": "qdrant@1"
          },
          {
            "hostname": "api",
            "type": "python@3.12",
            "ports": [{ "port": 8000, "httpSupport": true }],
            "envVariables": {
              "QDRANT_HOST": "${vectordb_hostname}",
              "QDRANT_PORT": "6333",
              "QDRANT_API_KEY": "${vectordb_api_key}"
            }
          }
        ]
      }
    }
  },
  "performance": {
    "indexing": {
      "hnsw": "Default high-performance index",
      "parameters": {
        "m": "Number of connections per node",
        "ef_construct": "Size of dynamic candidate list"
      }
    },
    "search": {
      "ef": "Size of dynamic candidate list during search",
      "optimization": "Balance between speed and accuracy"
    }
  }
}