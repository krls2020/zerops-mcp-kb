{
  "type": "rabbitmq",
  "category": "messaging",
  "description": "Message broker for reliable message queuing and routing",
  "versions": [
    { "version": "3", "status": "current", "recommended": true, "note": "Always uses latest stable" }
  ],
  "modes": ["HA", "NON_HA"],
  "ports": {
    "amqp": 5672,
    "management": 15672,
    "internal": true,
    "httpSupport": true
  },
  "configuration": {
    "yamlImport": {
      "required": ["hostname", "type", "mode"],
      "optional": ["minContainers", "maxContainers", "envVariables"]
    },
    "resources": {
      "minContainers": { "HA": 3, "NON_HA": 1 },
      "maxContainers": { "max": 5 },
      "verticalScaling": {
        "cpu": { "min": 1, "max": 32, "units": "cores" },
        "ram": { "min": 0.5, "max": 64, "units": "GB" },
        "disk": { "min": 5, "max": 1000, "units": "GB" }
      }
    },
    "cluster": {
      "HA": {
        "type": "Mirrored queues",
        "synchronization": "Automatic queue mirroring"
      }
    }
  },
  "envVariables": {
    "autoGenerated": {
      "hostname": "Internal hostname for connections",
      "connectionString": "Full AMQP connection string",
      "host": "RabbitMQ host (same as hostname)",
      "port": "AMQP port (5672)",
      "management_port": "Management UI port (15672)",
      "username": "Default username",
      "password": "Auto-generated secure password",
      "vhost": "Default virtual host (/)"
    }
  },
  "access": {
    "internal": "Accessible from other services via ${servicename_hostname}",
    "external": "No direct external access, use VPN for management",
    "auth": "Username/password authentication",
    "management": "Web UI accessible via VPN"
  },
  "features": [
    "AMQP 0-9-1 protocol",
    "Multiple messaging patterns",
    "Message persistence",
    "Message acknowledgments",
    "Publisher confirms",
    "Dead letter exchanges",
    "Message TTL",
    "Priority queues",
    "Delayed message plugin",
    "Management UI",
    "Clustering support"
  ],
  "messagingPatterns": {
    "workQueues": {
      "description": "Distribute tasks among workers",
      "features": ["Round-robin dispatch", "Message acknowledgment"]
    },
    "pubsub": {
      "description": "Broadcast messages to multiple consumers",
      "exchanges": ["fanout", "topic", "headers"]
    },
    "routing": {
      "description": "Route messages based on criteria",
      "exchanges": ["direct", "topic"]
    },
    "rpc": {
      "description": "Remote procedure calls",
      "pattern": "Request-reply with correlation ID"
    }
  },
  "bestPractices": [
    "Use durable queues for important messages",
    "Configure proper prefetch count",
    "Use publisher confirms for reliability",
    "Set appropriate TTL for messages",
    "Monitor queue depth and consumer lag",
    "Use dead letter exchanges for failed messages",
    "Implement proper error handling"
  ],
  "exchanges": {
    "direct": "Route by exact routing key match",
    "topic": "Route by pattern matching",
    "fanout": "Broadcast to all bound queues",
    "headers": "Route by message headers"
  },
  "clientLibraries": {
    "javascript": "amqplib",
    "python": "pika",
    "java": "com.rabbitmq:amqp-client",
    "go": "github.com/rabbitmq/amqp091-go",
    "dotnet": "RabbitMQ.Client",
    "php": "php-amqplib/php-amqplib"
  },
  "connectionExamples": {
    "nodejs": {
      "code": "import amqp from 'amqplib';\nconst connection = await amqp.connect(\n  'amqp://${username}:${password}@${hostname}:5672'\n);\nconst channel = await connection.createChannel();"
    },
    "python": {
      "code": "import pika\nconnection = pika.BlockingConnection(\n  pika.ConnectionParameters(\n    host='${hostname}',\n    credentials=pika.PlainCredentials('${username}', '${password}')\n  )\n)"
    },
    "connectionString": {
      "format": "amqp://${username}:${password}@${hostname}:5672/${vhost}"
    }
  },
  "useCases": {
    "taskQueue": {
      "description": "Background job processing",
      "features": ["Work distribution", "Retry logic", "Priority handling"]
    },
    "eventBus": {
      "description": "Microservices communication",
      "patterns": ["Event sourcing", "CQRS", "Saga"]
    },
    "notifications": {
      "description": "Real-time notifications",
      "features": ["Fan-out delivery", "Topic routing"]
    },
    "dataStreaming": {
      "description": "Data pipeline processing",
      "features": ["Reliable delivery", "Order guarantees"]
    }
  },
  "examples": {
    "basic": {
      "yamlImport": {
        "services": [
          {
            "hostname": "mq",
            "type": "rabbitmq@3",
            "mode": "NON_HA"
          }
        ]
      }
    },
    "production": {
      "yamlImport": {
        "services": [
          {
            "hostname": "mq",
            "type": "rabbitmq@3",
            "mode": "HA",
            "minContainers": 3
          }
        ]
      }
    },
    "withWorkers": {
      "yamlImport": {
        "services": [
          {
            "hostname": "mq",
            "type": "rabbitmq@3",
            "mode": "HA"
          },
          {
            "hostname": "api",
            "type": "nodejs@20",
            "ports": [{ "port": 3000, "httpSupport": true }],
            "envVariables": {
              "AMQP_URL": "amqp://${mq_username}:${mq_password}@${mq_hostname}:5672"
            }
          },
          {
            "hostname": "worker",
            "type": "nodejs@20",
            "minContainers": 2,
            "envVariables": {
              "AMQP_URL": "amqp://${mq_username}:${mq_password}@${mq_hostname}:5672"
            }
          }
        ]
      }
    }
  },
  "monitoring": {
    "managementUI": "http://${hostname}:15672",
    "metrics": "Prometheus metrics available",
    "health": "Health check endpoints"
  }
}