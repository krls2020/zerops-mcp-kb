{
  "type": "container",
  "category": "runtime",
  "description": "Run custom Docker containers with full control",
  "versions": [
    { "version": "1", "status": "current", "recommended": true, "note": "Supports any Docker image" }
  ],
  "modes": ["NON_HA"],
  "ports": {
    "range": "1-65535",
    "default": "Defined by container",
    "httpSupport": true,
    "protocols": ["TCP", "UDP"]
  },
  "configuration": {
    "yamlImport": {
      "required": ["hostname", "type"],
      "optional": ["minContainers", "maxContainers", "envVariables", "image", "command", "ports"]
    },
    "resources": {
      "minContainers": 1,
      "maxContainers": { "max": 10 },
      "verticalScaling": {
        "cpu": { "min": 0.5, "max": 32, "units": "cores" },
        "ram": { "min": 0.25, "max": 128, "units": "GB" },
        "disk": { "min": 1, "max": 5000, "units": "GB" }
      }
    }
  },
  "envVariables": {
    "system": {
      "HOSTNAME": "${hostname}"
    },
    "autoGenerated": {
      "hostname": "Service hostname"
    },
    "custom": "Any environment variables can be set"
  },
  "containerOptions": {
    "image": {
      "sources": [
        "Docker Hub",
        "GitHub Container Registry",
        "Google Container Registry",
        "AWS ECR (public)",
        "Any public registry"
      ],
      "authentication": "Private registries not supported"
    },
    "command": {
      "override": "Override container CMD",
      "entrypoint": "Cannot override ENTRYPOINT"
    },
    "volumes": {
      "persistent": "/var/data - Persistent storage",
      "temporary": "/tmp - Temporary storage"
    }
  },
  "limitations": [
    "No privileged mode",
    "No host network access",
    "No Docker-in-Docker",
    "Public images only",
    "No custom capabilities"
  ],
  "bestPractices": [
    "Use specific image tags, not 'latest'",
    "Configure health checks",
    "Set resource limits appropriately",
    "Use environment variables for configuration",
    "Log to stdout/stderr",
    "Handle SIGTERM for graceful shutdown",
    "Use non-root user in container"
  ],
  "healthChecks": {
    "http": {
      "path": "HTTP endpoint to check",
      "interval": "Check interval in seconds"
    },
    "tcp": {
      "port": "TCP port to check"
    }
  },
  "examples": {
    "customApp": {
      "yamlImport": {
        "services": [
          {
            "hostname": "app",
            "type": "container",
            "image": "myorg/myapp:1.0.0",
            "ports": [{ "port": 8080, "httpSupport": true }],
            "envVariables": {
              "APP_ENV": "production",
              "DATABASE_URL": "postgresql://${db_user}:${db_password}@${db_hostname}:5432/${db_dbName}"
            }
          }
        ]
      }
    },
    "nginxProxy": {
      "yamlImport": {
        "services": [
          {
            "hostname": "proxy",
            "type": "container",
            "image": "nginx:alpine",
            "ports": [{ "port": 80, "httpSupport": true }],
            "command": ["nginx", "-g", "daemon off;"]
          }
        ]
      }
    },
    "redisCommander": {
      "yamlImport": {
        "services": [
          {
            "hostname": "redis-ui",
            "type": "container",
            "image": "rediscommander/redis-commander:latest",
            "ports": [{ "port": 8081, "httpSupport": true }],
            "envVariables": {
              "REDIS_HOST": "${cache_hostname}",
              "REDIS_PASSWORD": "${cache_password}"
            }
          }
        ]
      }
    },
    "withZeropsYml": {
      "zeropsYml": {
        "zerops": [
          {
            "setup": "app",
            "build": {
              "base": "container",
              "image": "ghost:5-alpine",
              "ports": [{ "port": 2368, "httpSupport": true }],
              "envVariables": {
                "url": "https://myblog.example.com",
                "database__client": "mysql",
                "database__connection__host": "${db_hostname}",
                "database__connection__user": "${db_user}",
                "database__connection__password": "${db_password}",
                "database__connection__database": "${db_dbName}"
              }
            },
            "run": {
              "base": "container"
            }
          }
        ]
      }
    }
  },
  "useCases": {
    "legacyApps": {
      "description": "Run containerized legacy applications",
      "benefits": ["No code changes needed", "Quick migration"]
    },
    "thirdParty": {
      "description": "Run third-party software",
      "examples": ["Admin panels", "Monitoring tools", "Development tools"]
    },
    "microservices": {
      "description": "Deploy pre-built microservices",
      "benefits": ["Language agnostic", "Pre-configured images"]
    }
  },
  "monitoring": {
    "logs": "Container stdout/stderr captured",
    "metrics": "CPU, memory, disk usage tracked",
    "health": "Configurable health checks"
  }
}