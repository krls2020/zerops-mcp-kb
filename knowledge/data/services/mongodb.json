{
  "type": "mongodb",
  "category": "database",
  "description": "NoSQL document database for flexible data models",
  "versions": [
    { "version": "7", "status": "current", "recommended": true },
    { "version": "6", "status": "active" },
    { "version": "5", "status": "maintenance" }
  ],
  "modes": ["HA", "NON_HA"],
  "ports": {
    "default": 27017,
    "internal": true,
    "httpSupport": false
  },
  "configuration": {
    "yamlImport": {
      "required": ["hostname", "type", "mode"],
      "optional": ["minContainers", "maxContainers", "envVariables"]
    },
    "resources": {
      "minContainers": { "HA": 3, "NON_HA": 1 },
      "maxContainers": { "max": 7 },
      "verticalScaling": {
        "cpu": { "min": 1, "max": 32, "units": "cores" },
        "ram": { "min": 0.5, "max": 128, "units": "GB" },
        "disk": { "min": 5, "max": 5000, "units": "GB" }
      }
    },
    "cluster": {
      "HA": {
        "type": "Replica set",
        "members": "Primary + Secondaries",
        "failover": "Automatic failover"
      }
    }
  },
  "envVariables": {
    "autoGenerated": {
      "hostname": "Internal hostname for connections",
      "connectionString": "Full MongoDB connection string",
      "host": "MongoDB host (same as hostname)",
      "port": "MongoDB port (27017)",
      "database_name": "Default database name",
      "username": "Database username",
      "password": "Auto-generated secure password"
    }
  },
  "access": {
    "internal": "Accessible from other services via ${servicename_hostname}",
    "external": "No direct external access, use VPN for management",
    "auth": "Authentication required with username/password"
  },
  "features": [
    "Document-oriented storage",
    "Dynamic schemas",
    "Rich query language",
    "Aggregation framework",
    "Full-text search",
    "Geospatial queries",
    "Change streams",
    "Transactions (replica sets)",
    "GridFS for large files"
  ],
  "dataModel": {
    "documents": {
      "format": "BSON (Binary JSON)",
      "maxSize": "16MB per document",
      "nesting": "Embedded documents and arrays"
    },
    "collections": {
      "indexes": "B-tree indexes for performance",
      "sharding": "Not available in Zerops"
    }
  },
  "bestPractices": [
    "Design schema based on query patterns",
    "Use indexes for frequently queried fields",
    "Avoid unbounded array growth",
    "Use aggregation pipeline for complex queries",
    "Monitor query performance",
    "Set up proper backup strategy",
    "Use connection pooling"
  ],
  "connectionStrings": {
    "standard": "mongodb://${username}:${password}@${hostname}:27017/${database_name}",
    "withOptions": "mongodb://${username}:${password}@${hostname}:27017/${database_name}?authSource=admin",
    "replicaSet": "mongodb://${username}:${password}@${hostname}:27017/${database_name}?replicaSet=rs0"
  },
  "clientLibraries": {
    "javascript": "mongodb",
    "python": "pymongo",
    "java": "mongodb-driver-sync",
    "go": "go.mongodb.org/mongo-driver",
    "dotnet": "MongoDB.Driver",
    "php": "mongodb/mongodb"
  },
  "connectionExamples": {
    "nodejs": {
      "code": "import { MongoClient } from 'mongodb';\nconst client = new MongoClient(\n  'mongodb://${username}:${password}@${hostname}:27017/${database_name}'\n);\nawait client.connect();"
    },
    "python": {
      "code": "from pymongo import MongoClient\nclient = MongoClient(\n  'mongodb://${username}:${password}@${hostname}:27017/${database_name}'\n)"
    },
    "mongoose": {
      "code": "import mongoose from 'mongoose';\nawait mongoose.connect(\n  'mongodb://${username}:${password}@${hostname}:27017/${database_name}'\n);"
    }
  },
  "useCases": {
    "cms": {
      "description": "Content management systems",
      "benefits": ["Flexible schemas", "Rich content types"]
    },
    "catalog": {
      "description": "Product catalogs",
      "benefits": ["Variable attributes", "Nested data"]
    },
    "realtime": {
      "description": "Real-time applications",
      "features": ["Change streams", "Tailable cursors"]
    },
    "iot": {
      "description": "IoT data storage",
      "benefits": ["Time-series data", "Flexible schemas"]
    }
  },
  "examples": {
    "basic": {
      "yamlImport": {
        "services": [
          {
            "hostname": "db",
            "type": "mongodb@7",
            "mode": "NON_HA"
          }
        ]
      }
    },
    "production": {
      "yamlImport": {
        "services": [
          {
            "hostname": "db",
            "type": "mongodb@7",
            "mode": "HA",
            "minContainers": 3
          }
        ]
      }
    },
    "withApp": {
      "yamlImport": {
        "services": [
          {
            "hostname": "db",
            "type": "mongodb@7",
            "mode": "HA"
          },
          {
            "hostname": "api",
            "type": "nodejs@20",
            "ports": [{ "port": 3000, "httpSupport": true }],
            "envVariables": {
              "MONGODB_URI": "mongodb://${db_username}:${db_password}@${db_hostname}:27017/${db_dbName}"
            }
          }
        ]
      }
    }
  },
  "performance": {
    "indexes": "Create indexes for query optimization",
    "aggregation": "Use pipeline for complex operations",
    "caching": "WiredTiger storage engine with caching"
  }
}